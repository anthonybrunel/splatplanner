<launch>


  <!-- topic of your odometry such as VIO or LIO -->

  <!-- gazebo arguments -->
  <arg name="world_name" default="basic"/>
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <arg name="map_path" default="/home/anthony/ros_project/motion_planning/src/oscar/data/map/powerplant/powerplant.obj"/>


  <arg name="traj_topic" value="/firefly/command/trajectory" />

  <arg name="voxel_size" default="0.2"/>


  <arg name="cloud_topic" value="/camera/cloud"/>
  <!-- <arg name="cloud_topic" value="/test_laser/scan_reg"/> -->
  <arg name="odom_topic" value="/camera/odom"/>
  <arg name="depth_topic" value="/camera/depth"/>

<!-- camera parameters TODO -->

  <arg name="useFov" value="true"/>
  <arg name="width" value="640"/>
  <arg name="fovx" value="115"/>
  <arg name="fovy" value="90"/>
  <arg name="max_range" default="7."/>

  <arg name="uav_gt_odom_topic" value="/ground_truth/odometry"/>


  <arg name="world_frame" default="world" />

  <arg name="x_start" value="-8" />
  <arg name="y_start" value="8" />
  <arg name="z_start" value="0." />





  <arg name="x_size" value="31" />
  <arg name="y_size" value="33" />
  <arg name="z_size" value="29." />

  <arg name="origin_x" value="0" />
  <arg name="origin_y" value="0" />
  <arg name="origin_z" value="11.1" />

    <arg name="p_oc_x" value="0." />
    <arg name="p_oc_y" value="0." />
    <arg name="p_oc_z" value="0." />

    <!-- <arg name="p_oc_qx" value="0.0" />
    <arg name="p_oc_qy" value="0.131" />
    <arg name="p_oc_qz" value="0." />
    <arg name="p_oc_qw" value="0.991" /> -->
    <arg name="p_oc_qx" value="0.0" />
    <arg name="p_oc_qy" value="0.0" />
    <arg name="p_oc_qz" value="0." />
    <arg name="p_oc_qw" value="1." />
  <!-- gazebo -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <arg name="debug" value="false" />
    <arg name="paused" value="false" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
    <arg name="use_sim_time" value="false"/>
  </include>


  <group ns="$(arg mav_name)">
    <!-- Setup a mav from rotors-->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/$(arg mav_name)_base.xacro" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="$(arg z_start)" />
      <arg name="x" value="$(arg x_start)" />
      <arg name="y" value="$(arg y_start)" />
    </include>



     <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.01"/>
    </node>
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node> 




    <!-- static camera transform -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 0 0 0 0 /camera_link /camera 100"/> -->
  </group>




  <node name="vk_depth_sim" pkg="ROSVkVizualizer" type="vk_depth_sim" output="screen">

    <!-- publisher -->
    <remap from="/camera/cloud" to="$(arg cloud_topic)" />
    <remap from="/camera/odom" to="$(arg odom_topic)" />


    <!-- subscriber -->
    <remap from="/camera/ground_truth/odometry" to="$(arg mav_name)/$(arg uav_gt_odom_topic)" />
    <param name="/camera/model_path" value="$(arg map_path)" />

    <param name="/camera/useFov" value="$(arg useFov)" />
    <param name="/camera/width" value="$(arg width)" />
    <param name="/camera/fovx" value="$(arg fovx)" />
    <param name="/camera/fovy" value="$(arg fovy)" />
    <param name="/camera/max_range" value="$(arg max_range)" />


    <param name="/camera/oc_x" value="$(arg p_oc_x)" />
    <param name="/camera/oc_y" value="$(arg p_oc_z)" />
    <param name="/camera/oc_z" value="$(arg p_oc_y)" />
    <param name="/camera/oc_qw" value="$(arg p_oc_qw)" />
    <param name="/camera/oc_qx" value="$(arg p_oc_qx)" />
    <param name="/camera/oc_qy" value="$(arg p_oc_qy)" />
    <param name="/camera/oc_qz" value="$(arg p_oc_qz)" />
 </node>


  <node name="map_test" pkg="map_core" type="map_test" output="screen">
    <!-- subscriber -->
    <remap from="/map_core/cloud" to="$(arg cloud_topic)" />
    <remap from="/map_core/odometry" to="$(arg odom_topic)" />
    <remap from="/map_core/depth" to="$(arg depth_topic)" />

    <param name="/map_core/resolution" value="$(arg voxel_size)" />
    <param name="/map_core/x_size" value="$(arg x_size)" />
    <param name="/map_core/y_size" value="$(arg y_size)" />
    <param name="/map_core/z_size" value="$(arg z_size)" />

    <param name="/map_core/origin_x" value="$(arg origin_x)" />
    <param name="/map_core/origin_y" value="$(arg origin_y)" />
    <param name="/map_core/origin_z" value="$(arg origin_z)" />

  <param name="/map_core/useFov" value="$(arg useFov)" />
  <param name="/map_core/width" value="$(arg width)" />
  <param name="/map_core/fovx" value="$(arg fovx)" />
  <param name="/map_core/fovy" value="$(arg fovy)" />
  <param name="/map_core/max_range" value="$(arg max_range)" />
 </node>



 <node name="planner" pkg="uav_mapper" type="test_traj" output="screen" >
   <!-- publisher -->
   <remap from="trajectory" to="$(arg mav_name)/trajectory" />

   <!-- subscriber -->
   <remap from="/planner/uav_odom" to="$(arg mav_name)/$(arg uav_gt_odom_topic)" />
   <remap from="/planner/command/trajectory" to="/firefly/command/trajectory"/>

      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />

     <remap from="/planner/depth_odom" to="$(arg odom_topic)" />
     <param name="/useLeeController" value="false" />
      <remap from="/planner/command/motor_speed" to="/firefly/command/motor_speed" />


   <param name="/max_v" value="2.5" />
   <param name="/max_a" value="2.5" />
   <param name="/map_core/resolution" value="$(arg voxel_size)" />
  <param name="/map_core/x_size" value="$(arg x_size)" />
  <param name="/map_core/y_size" value="$(arg y_size)" />
  <param name="/map_core/z_size" value="$(arg z_size)" />

  <param name="/map_core/origin_x" value="$(arg origin_x)" />
  <param name="/map_core/origin_y" value="$(arg origin_y)" />
  <param name="/map_core/origin_z" value="$(arg origin_z)" />
    <param name="/camera/fovx" value="$(arg fovx)" />
    <param name="/camera/fovy" value="$(arg fovy)" />
    <param name="/camera/max_range" value="$(arg max_range)" />

    <param name="/camera/oc_x" value="$(arg p_oc_x)" />
    <param name="/camera/oc_y" value="$(arg p_oc_z)" />
    <param name="/camera/oc_z" value="$(arg p_oc_y)" />
    <param name="/camera/oc_qw" value="$(arg p_oc_qw)" />
    <param name="/camera/oc_qx" value="$(arg p_oc_qx)" />
    <param name="/camera/oc_qy" value="$(arg p_oc_qy)" />
    <param name="/camera/oc_qz" value="$(arg p_oc_qz)" />


  <param name="/map_core/save_folder" value="/home/anthony/ros_project/motion_planning/src/oscar/data/mapper_result/mapper_vid" />
</node>



</launch>
