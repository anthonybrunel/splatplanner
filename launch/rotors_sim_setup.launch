<launch>

  <!-- Params for Gazebo and a mav from rotors-->
<arg name="world_path" default="$(find rotors_gazebo)/worlds/basic.world"/>
<arg name="mav_name" default="firefly"/>
<arg name="gui" default="false"/>
<arg name="verbose" default="false"/>
<arg name="paused" default="true"/>
<arg name="reference_frame" default="world"/>
<arg name="world_frame" default="world" />
<arg name="sampling_time" default="0.01"/>
<arg name="traj_topic" default="/firefly/command/trajectory" />
<arg name="model" default="$(find rotors_description)/urdf/$(arg mav_name)_base.xacro" />


<arg name="uav_gt_odom_topic" value="/ground_truth/odometry"/>


<arg name="x" default="0" />
<arg name="y" default="0" />
<arg name="z" default="1." />


  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_path)"/>
    <arg name="debug" value="false" />
    <arg name="paused" value="false" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="use_sim_time" value="false"/>
  </include>


  <group ns="$(arg mav_name)">
    <!-- Setup a mav from rotors-->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/$(arg mav_name)_base.xacro" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
    </include>




    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.01"/>
    </node>

    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>


    <node name="rotors_sim_setup" pkg="mav_sim_helper" type="rotors_sim_setup.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <rosparam param="initial_position" subst_value="True"> [$(arg x),$(arg y),$(arg z)] </rosparam>
    </node>
    <!-- static camera transform -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 0 0 0 0 /camera_link /camera 100"/> -->

  </group>

</launch>
